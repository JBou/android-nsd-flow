plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka-android'
    id 'jacoco'
}

jacoco {
    toolVersion = '0.8.0'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = freeCompilerArgs + "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
    }
}


repositories {
    google()
    jcenter()
    mavenCentral()
}

android {
    compileSdkVersion 30
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        test {
            java.srcDir 'src/sharedTest/java'
        }
        androidTest {
            java.srcDir 'src/sharedTest/java'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2"

    implementation "androidx.annotation:annotation:1.1.0"

    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'

    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation "org.mockito:mockito-android:2.28.2"
}

dokka {
    noStdlibLink = false
    includeNonPublic = false
    skipEmptyPackages = true
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

afterEvaluate { project ->
    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaAndroidTask) {
        outputFormat = 'javadoc'
        outputDirectory = "$buildDir/javadoc"
        inputs.dir 'src/main/java'
    }

    task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
        classifier('javadoc')
        from "$buildDir/javadoc"
    }

    task sourcesJar(type: Jar) {
        classifier('sources')
        from android.sourceSets.main.java.srcDirs
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

task jacocoUnitTestReport(type: JacocoReport, group: 'verification', dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

task jacocoFullTestReport(type: JacocoReport, group: 'verification', dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData.from(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

task copyAndroidCoverage(type: Copy) {
    /*afterEvaluate {
        dependsOn jacocoFullTestReport
    }*/
    from 'build/reports/jacoco/jacocoFullTestReport/jacocoFullTestReport.xml'
    into './'
    rename { String fileName ->
        fileName = "integration.xml"
    }
}
